//package io.github.poulad.test.hnp.architecture;
//
//import static com.tngtech.archunit.lang.syntax.ArchRuleDefinition.methods;
//import static io.github.poulad.test.hnp.architecture.ArchUnitConditions.areNotAutoGenerated;
//import static io.github.poulad.test.hnp.architecture.ArchUnitConditions.areNotJavaEnumMethods;
//import static io.github.poulad.test.hnp.architecture.ArchUnitConditions.haveNullableReturnType;
//
//import com.tngtech.archunit.junit.AnalyzeClasses;
//import com.tngtech.archunit.junit.ArchTest;
//import com.tngtech.archunit.lang.ArchRule;
//import java.util.Optional;
//import javax.annotation.Nonnull;
//import javax.annotation.Nullable;
//
//@AnalyzeClasses(packages = "io.github.poulad.hnp")
//@SuppressWarnings("unused")
//public class ArchitectureTests {
//
//  @ArchTest
//  static ArchRule all_public_methods_should_have_nullability_annotations = methods()
//      .that().arePublic().or().arePackagePrivate()
//      .and(haveNullableReturnType())
//      .and().doNotHaveName("toString")
//      .and(areNotAutoGenerated()) // MapStruct's Impl class.
//      .and(areNotJavaEnumMethods()) // "values()" and "valueOf()"
//      .should().beAnnotatedWith(javax.annotation.Nonnull.class)
//      .orShould().beAnnotatedWith(javax.annotation.Nullable.class)
//      .because("Tools can catch NPE bugs if nullability is expressed on the public API.");
//
//  @ArchTest
//  static ArchRule optional_returning_methods_should_have_nonnull_annotation = methods()
//      .that().haveRawReturnType(Optional.class)
//      .should().beAnnotatedWith(Nonnull.class)
//      .because("Optional-returning methods should have @Nonnull annotation.");
//
//  @ArchTest
//  static ArchRule optional_returning_methods_should_not_have_nullable_annotation = methods()
//      .that().haveRawReturnType(Optional.class)
//      .should().notBeAnnotatedWith(Nullable.class)
//      .because("Optional-returning methods should NOT have @Nullable annotation.");
//}
