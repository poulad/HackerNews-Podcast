package io.github.poulad.test.hnp.architecture;

import com.tngtech.archunit.base.DescribedPredicate;
import com.tngtech.archunit.core.domain.JavaClass;
import com.tngtech.archunit.core.domain.JavaMethod;
import java.lang.reflect.Parameter;
import java.util.Arrays;
import lombok.NonNull;

public class ArchUnitConditions {

  public static DescribedPredicate<JavaMethod> haveNullableReturnType() {
    return new DescribedPredicate<JavaMethod>("have nullable return type") {
      @Override
      public boolean apply(JavaMethod javaMethod) {
        return isOfNullableType(javaMethod.getRawReturnType());
      }
    };
  }

  public static DescribedPredicate<JavaMethod> haveNullableParameters() {
    return new DescribedPredicate<JavaMethod>("have nullable parameter(s)") {
      @Override
      public boolean apply(JavaMethod javaMethod) {
        return Arrays.stream(javaMethod.reflect().getParameters())
            .map(Parameter::getType)
            .anyMatch(ArchUnitConditions::isOfNullableType);
      }
    };
  }

  public static DescribedPredicate<JavaMethod> areNotAutoGenerated() {
    return new DescribedPredicate<JavaMethod>("are not auto-generated") {
      @Override
      public boolean apply(JavaMethod javaMethod) {
        return !isMapStructImplementation(javaMethod.getOwner());
      }
    };
  }

  public static DescribedPredicate<JavaMethod> areNotJavaEnumMethods() {
    return new DescribedPredicate<JavaMethod>("are not Java's enum methods") {
      @Override
      public boolean apply(JavaMethod javaMethod) {
        return !(
            javaMethod.getOwner().isEnum()
                && Arrays.asList("valueOf", "values").contains(javaMethod.getName())
        );
      }
    };
  }

  private static boolean isOfNullableType(@NonNull JavaClass javaClass) {
    return isOfNullableType(javaClass.reflect());
  }

  private static boolean isOfNullableType(@NonNull Class<?> clazz) {
    return clazz.equals(String.class) || !clazz.isPrimitive();
  }

  private static boolean isMapStructImplementation(@NonNull JavaClass javaClass) {
    return javaClass.getName().endsWith("Impl")
        && javaClass.getInterfaces().size() == 1
        && javaClass.getInterfaces().stream()
        .findFirst().get().isAnnotatedWith(org.mapstruct.Mapper.class);
  }
}
